{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNwq/Y6wbCU7WH9OXc47lfh",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cmskzhan/helloworld/blob/master/concepts/python/public/scikit-linearegression\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qYaElQeUMlwM",
        "outputId": "c74e0dde-48d6-477e-9321-895047008fe1"
      },
      "source": [
        "import sklearn\r\n",
        "print(sklearn.__version__)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.22.2.post1\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iNbkVDX-MrrX"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "# from sklearn.datasets import load_breast_cancer\r\n",
        "from pandas_datareader import data as web\r\n",
        "df = web.DataReader(\"MSCI\", data_source='yahoo', start='01-01-2015')"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2e40iKzZM-YN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "outputId": "de177df8-2dc3-4c45-df0a-4638e2ddc02e"
      },
      "source": [
        "df"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume</th>\n",
              "      <th>Adj Close</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-01-02</th>\n",
              "      <td>47.939999</td>\n",
              "      <td>46.930000</td>\n",
              "      <td>47.689999</td>\n",
              "      <td>47.689999</td>\n",
              "      <td>477500.0</td>\n",
              "      <td>44.373196</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-05</th>\n",
              "      <td>47.590000</td>\n",
              "      <td>46.799999</td>\n",
              "      <td>47.430000</td>\n",
              "      <td>47.240002</td>\n",
              "      <td>814100.0</td>\n",
              "      <td>43.954487</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-06</th>\n",
              "      <td>49.549999</td>\n",
              "      <td>47.540001</td>\n",
              "      <td>47.599998</td>\n",
              "      <td>48.610001</td>\n",
              "      <td>1961000.0</td>\n",
              "      <td>45.229206</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-07</th>\n",
              "      <td>49.790001</td>\n",
              "      <td>48.439999</td>\n",
              "      <td>48.880001</td>\n",
              "      <td>49.720001</td>\n",
              "      <td>1257700.0</td>\n",
              "      <td>46.262001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-08</th>\n",
              "      <td>51.270000</td>\n",
              "      <td>49.680000</td>\n",
              "      <td>50.060001</td>\n",
              "      <td>51.220001</td>\n",
              "      <td>1287600.0</td>\n",
              "      <td>47.657684</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-24</th>\n",
              "      <td>417.549988</td>\n",
              "      <td>405.450012</td>\n",
              "      <td>411.869995</td>\n",
              "      <td>417.230011</td>\n",
              "      <td>480600.0</td>\n",
              "      <td>417.230011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-25</th>\n",
              "      <td>420.489990</td>\n",
              "      <td>400.500000</td>\n",
              "      <td>417.799988</td>\n",
              "      <td>406.299988</td>\n",
              "      <td>906400.0</td>\n",
              "      <td>406.299988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-26</th>\n",
              "      <td>420.579987</td>\n",
              "      <td>409.440002</td>\n",
              "      <td>410.829987</td>\n",
              "      <td>414.519989</td>\n",
              "      <td>662200.0</td>\n",
              "      <td>414.519989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-03-01</th>\n",
              "      <td>422.380005</td>\n",
              "      <td>413.029999</td>\n",
              "      <td>418.089996</td>\n",
              "      <td>420.029999</td>\n",
              "      <td>342900.0</td>\n",
              "      <td>420.029999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-03-02</th>\n",
              "      <td>429.559998</td>\n",
              "      <td>410.470001</td>\n",
              "      <td>420.000000</td>\n",
              "      <td>412.570007</td>\n",
              "      <td>363396.0</td>\n",
              "      <td>412.570007</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1551 rows Ã— 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                  High         Low  ...     Volume   Adj Close\n",
              "Date                                ...                       \n",
              "2015-01-02   47.939999   46.930000  ...   477500.0   44.373196\n",
              "2015-01-05   47.590000   46.799999  ...   814100.0   43.954487\n",
              "2015-01-06   49.549999   47.540001  ...  1961000.0   45.229206\n",
              "2015-01-07   49.790001   48.439999  ...  1257700.0   46.262001\n",
              "2015-01-08   51.270000   49.680000  ...  1287600.0   47.657684\n",
              "...                ...         ...  ...        ...         ...\n",
              "2021-02-24  417.549988  405.450012  ...   480600.0  417.230011\n",
              "2021-02-25  420.489990  400.500000  ...   906400.0  406.299988\n",
              "2021-02-26  420.579987  409.440002  ...   662200.0  414.519989\n",
              "2021-03-01  422.380005  413.029999  ...   342900.0  420.029999\n",
              "2021-03-02  429.559998  410.470001  ...   363396.0  412.570007\n",
              "\n",
              "[1551 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hreEYOveNf-z",
        "outputId": "68ccc5ef-e96e-4d20-eaa8-7bcb8fac93db"
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(293, 6)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "rSxsmdx4N-in",
        "outputId": "33db0960-2826-420a-e41e-6369c0837673"
      },
      "source": [
        "X = df.drop(['Close', 'Adj Close'], axis=1)\r\n",
        "Y = df['Close']\r\n",
        "X"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Open</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-01-02</th>\n",
              "      <td>47.939999</td>\n",
              "      <td>46.930000</td>\n",
              "      <td>47.689999</td>\n",
              "      <td>477500.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-05</th>\n",
              "      <td>47.590000</td>\n",
              "      <td>46.799999</td>\n",
              "      <td>47.430000</td>\n",
              "      <td>814100.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-06</th>\n",
              "      <td>49.549999</td>\n",
              "      <td>47.540001</td>\n",
              "      <td>47.599998</td>\n",
              "      <td>1961000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-07</th>\n",
              "      <td>49.790001</td>\n",
              "      <td>48.439999</td>\n",
              "      <td>48.880001</td>\n",
              "      <td>1257700.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-01-08</th>\n",
              "      <td>51.270000</td>\n",
              "      <td>49.680000</td>\n",
              "      <td>50.060001</td>\n",
              "      <td>1287600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-24</th>\n",
              "      <td>417.549988</td>\n",
              "      <td>405.450012</td>\n",
              "      <td>411.869995</td>\n",
              "      <td>480600.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-25</th>\n",
              "      <td>420.489990</td>\n",
              "      <td>400.500000</td>\n",
              "      <td>417.799988</td>\n",
              "      <td>906400.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-26</th>\n",
              "      <td>420.579987</td>\n",
              "      <td>409.440002</td>\n",
              "      <td>410.829987</td>\n",
              "      <td>662200.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-03-01</th>\n",
              "      <td>422.380005</td>\n",
              "      <td>413.029999</td>\n",
              "      <td>418.089996</td>\n",
              "      <td>342900.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-03-02</th>\n",
              "      <td>429.559998</td>\n",
              "      <td>410.470001</td>\n",
              "      <td>420.000000</td>\n",
              "      <td>363396.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1551 rows Ã— 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                  High         Low        Open     Volume\n",
              "Date                                                     \n",
              "2015-01-02   47.939999   46.930000   47.689999   477500.0\n",
              "2015-01-05   47.590000   46.799999   47.430000   814100.0\n",
              "2015-01-06   49.549999   47.540001   47.599998  1961000.0\n",
              "2015-01-07   49.790001   48.439999   48.880001  1257700.0\n",
              "2015-01-08   51.270000   49.680000   50.060001  1287600.0\n",
              "...                ...         ...         ...        ...\n",
              "2021-02-24  417.549988  405.450012  411.869995   480600.0\n",
              "2021-02-25  420.489990  400.500000  417.799988   906400.0\n",
              "2021-02-26  420.579987  409.440002  410.829987   662200.0\n",
              "2021-03-01  422.380005  413.029999  418.089996   342900.0\n",
              "2021-03-02  429.559998  410.470001  420.000000   363396.0\n",
              "\n",
              "[1551 rows x 4 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UrYmT09GPjYj",
        "outputId": "99274df4-7dd6-4cd7-969d-225ec569ca9d"
      },
      "source": [
        "X.columns"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['High', 'Low', 'Open', 'Volume'], dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vuIY2JxgP9Pu"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\r\n",
        "x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.1 )"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T4i6QMRsRP0q",
        "outputId": "182b7776-fcdd-41dc-bb8c-6129ef144223"
      },
      "source": [
        "from sklearn.linear_model import LinearRegression\r\n",
        "l_model = LinearRegression(normalize = True).fit(x_train, y_train)\r\n",
        "print(\"Linear Regression Model Traininig Score:\", l_model.score(x_train, y_train))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Linear Regression Model Traininig Score: 0.9997890205759676\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Nz_dAdRSnH7",
        "outputId": "66c3792d-8a0d-4a31-d315-3aac05010317"
      },
      "source": [
        "predicators = x_train.columns\r\n",
        "weights = pd.Series(l_model.coef_, predicators)\r\n",
        "weights"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "High      8.220667e-01\n",
              "Low       8.690401e-01\n",
              "Open     -6.908593e-01\n",
              "Volume    5.366757e-08\n",
              "dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "030M1_nJSp8y"
      },
      "source": [
        "y_predicate = l_model.predict(x_test)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "77xrVOlSXygH",
        "outputId": "0eff6d06-41da-48c7-97a5-aec08b32c1ec"
      },
      "source": [
        "pred_vs_actual = pd.DataFrame({'predicted': y_predicate, 'actual': y_test})\r\n",
        "pred_vs_actual.head(20)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>predicted</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2019-08-01</th>\n",
              "      <td>230.238819</td>\n",
              "      <td>225.330002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-10-24</th>\n",
              "      <td>83.270799</td>\n",
              "      <td>83.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-04-08</th>\n",
              "      <td>61.876429</td>\n",
              "      <td>61.830002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-07-17</th>\n",
              "      <td>171.274190</td>\n",
              "      <td>170.740005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-10-26</th>\n",
              "      <td>349.346172</td>\n",
              "      <td>349.559998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-07-09</th>\n",
              "      <td>61.990915</td>\n",
              "      <td>62.230000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-03-22</th>\n",
              "      <td>71.754724</td>\n",
              "      <td>71.629997</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-02-11</th>\n",
              "      <td>65.609877</td>\n",
              "      <td>65.260002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-03</th>\n",
              "      <td>123.957306</td>\n",
              "      <td>126.040001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-03-25</th>\n",
              "      <td>263.549061</td>\n",
              "      <td>263.769989</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-07-02</th>\n",
              "      <td>61.942004</td>\n",
              "      <td>62.020000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-06-05</th>\n",
              "      <td>320.055956</td>\n",
              "      <td>330.880005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-09-28</th>\n",
              "      <td>353.912613</td>\n",
              "      <td>354.470001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-06-09</th>\n",
              "      <td>77.951697</td>\n",
              "      <td>78.070000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-02-20</th>\n",
              "      <td>145.209432</td>\n",
              "      <td>144.380005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2019-11-13</th>\n",
              "      <td>249.490342</td>\n",
              "      <td>249.210007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2016-04-11</th>\n",
              "      <td>73.639054</td>\n",
              "      <td>73.139999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-10-09</th>\n",
              "      <td>121.354097</td>\n",
              "      <td>121.540001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-08-30</th>\n",
              "      <td>177.814132</td>\n",
              "      <td>177.649994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-03-02</th>\n",
              "      <td>142.778771</td>\n",
              "      <td>143.320007</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             predicted      actual\n",
              "Date                              \n",
              "2019-08-01  230.238819  225.330002\n",
              "2016-10-24   83.270799   83.220001\n",
              "2015-04-08   61.876429   61.830002\n",
              "2018-07-17  171.274190  170.740005\n",
              "2020-10-26  349.346172  349.559998\n",
              "2015-07-09   61.990915   62.230000\n",
              "2016-03-22   71.754724   71.629997\n",
              "2016-02-11   65.609877   65.260002\n",
              "2017-11-03  123.957306  126.040001\n",
              "2020-03-25  263.549061  263.769989\n",
              "2015-07-02   61.942004   62.020000\n",
              "2020-06-05  320.055956  330.880005\n",
              "2020-09-28  353.912613  354.470001\n",
              "2016-06-09   77.951697   78.070000\n",
              "2018-02-20  145.209432  144.380005\n",
              "2019-11-13  249.490342  249.210007\n",
              "2016-04-11   73.639054   73.139999\n",
              "2017-10-09  121.354097  121.540001\n",
              "2018-08-30  177.814132  177.649994\n",
              "2018-03-02  142.778771  143.320007"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KWBAQrnHYJWX",
        "outputId": "d4fab9b4-4275-4cbb-a981-b205ba05576f"
      },
      "source": [
        "from sklearn.metrics import r2_score\r\n",
        "print(\"R2 score for linear regression test is: \", r2_score(y_predicate, y_test))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R2 score for linear regression test is:  0.999781714088531\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 521
        },
        "id": "cKkl-y9DZK_K",
        "outputId": "fbd5039f-933d-4da5-f8fb-3cc38bf71701"
      },
      "source": [
        "import matplotlib.pyplot as plt\r\n",
        "%matplotlib inline\r\n",
        "plt.style.use('fivethirtyeight')\r\n",
        "plt.figure(figsize=(24.2,9))\r\n",
        "#plt.scatter(df.index, df['TS_buy'], color = 'green', label = 'TS buy', marker = '^', alpha = 1)\r\n",
        "#plt.scatter(df.index, df['TS_sell'], color = 'red', label = 'TS sell', marker = 'v', alpha = 1)\r\n",
        "plt.scatter(y_predicate, y_test)\r\n",
        "plt.show()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1742.4x648 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "N6NHQGZhZlDh",
        "outputId": "06780f30-9c22-4e98-9619-7e968f4a45c6"
      },
      "source": [
        "# to compare predicted and actual\r\n",
        "pred_vs_actual.sort_index()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>predicted</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2015-01-15</th>\n",
              "      <td>52.891705</td>\n",
              "      <td>52.900002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-02-03</th>\n",
              "      <td>54.889169</td>\n",
              "      <td>54.830002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-02-04</th>\n",
              "      <td>55.438421</td>\n",
              "      <td>55.130001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-02-17</th>\n",
              "      <td>57.472233</td>\n",
              "      <td>57.349998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2015-02-20</th>\n",
              "      <td>57.730565</td>\n",
              "      <td>58.029999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-11-04</th>\n",
              "      <td>394.549102</td>\n",
              "      <td>398.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2020-12-22</th>\n",
              "      <td>434.536054</td>\n",
              "      <td>437.579987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-02</th>\n",
              "      <td>428.975092</td>\n",
              "      <td>425.130005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-19</th>\n",
              "      <td>435.947604</td>\n",
              "      <td>432.970001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2021-02-25</th>\n",
              "      <td>405.164827</td>\n",
              "      <td>406.299988</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>156 rows Ã— 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "             predicted      actual\n",
              "Date                              \n",
              "2015-01-15   52.891705   52.900002\n",
              "2015-02-03   54.889169   54.830002\n",
              "2015-02-04   55.438421   55.130001\n",
              "2015-02-17   57.472233   57.349998\n",
              "2015-02-20   57.730565   58.029999\n",
              "...                ...         ...\n",
              "2020-11-04  394.549102  398.220001\n",
              "2020-12-22  434.536054  437.579987\n",
              "2021-02-02  428.975092  425.130005\n",
              "2021-02-19  435.947604  432.970001\n",
              "2021-02-25  405.164827  406.299988\n",
              "\n",
              "[156 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "jpgUeLZfaGfP",
        "outputId": "251b2d01-3585-4a4a-ff98-84f36d6a7913"
      },
      "source": [
        "show_diff = pred_vs_actual.sort_index().reset_index(drop=True)\r\n",
        "show_diff"
      ],
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>predicted</th>\n",
              "      <th>actual</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>52.891705</td>\n",
              "      <td>52.900002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>54.889169</td>\n",
              "      <td>54.830002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>55.438421</td>\n",
              "      <td>55.130001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>57.472233</td>\n",
              "      <td>57.349998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>57.730565</td>\n",
              "      <td>58.029999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>151</th>\n",
              "      <td>394.549102</td>\n",
              "      <td>398.220001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>152</th>\n",
              "      <td>434.536054</td>\n",
              "      <td>437.579987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>153</th>\n",
              "      <td>428.975092</td>\n",
              "      <td>425.130005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>154</th>\n",
              "      <td>435.947604</td>\n",
              "      <td>432.970001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>155</th>\n",
              "      <td>405.164827</td>\n",
              "      <td>406.299988</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>156 rows Ã— 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      predicted      actual\n",
              "0     52.891705   52.900002\n",
              "1     54.889169   54.830002\n",
              "2     55.438421   55.130001\n",
              "3     57.472233   57.349998\n",
              "4     57.730565   58.029999\n",
              "..          ...         ...\n",
              "151  394.549102  398.220001\n",
              "152  434.536054  437.579987\n",
              "153  428.975092  425.130005\n",
              "154  435.947604  432.970001\n",
              "155  405.164827  406.299988\n",
              "\n",
              "[156 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "txjy-avvaJBv",
        "outputId": "a6fd3d64-684c-426f-c76f-1ac007610f67"
      },
      "source": [
        "plt.plot(show_diff['predicted'], label='predicted')\r\n",
        "plt.plot(show_diff['actual'], label='actual')\r\n",
        "plt.show()"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "joxZq4_dl9MK"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}